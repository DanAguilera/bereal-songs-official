{"ast":null,"code":"import decode from 'jwt-decode';\nexport default class AuthService {\n  // Initializing important variables\n  constructor(domain) {\n    this.domain = domain || 'http://localhost:4000'; // API server domain\n    this.fetch = this.fetch.bind(this); // React binding stuff\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n  login(email, password) {\n    // Get a token from api server using the fetch api\n    return this.fetch(`${this.domain}/api/authenticate`, {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => {\n      this.setToken(res.token); // Setting the token in localStorage\n      return Promise.resolve(res);\n    });\n  }\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // Getting token from localstorage\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        // Checking if token is expired. N\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n  setToken(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n  }\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n  }\n  getProfile() {\n    // Using jwt-decode npm package to decode the token\n    return decode(this.getToken());\n  }\n  fetch(url, options) {\n    // performs api calls sending the required authentication headers\n    const headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    // Setting Authorization header\n    // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n    if (this.loggedIn()) {\n      headers.Authorization = `Bearer ${this.getToken()}`;\n    }\n    return fetch(url, {\n      headers,\n      ...options\n    }).then(this._checkStatus).then(response => response.json());\n  }\n  _checkStatus(response) {\n    // raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["decode","AuthService","constructor","domain","fetch","bind","login","getProfile","email","password","method","body","JSON","stringify","then","res","setToken","token","Promise","resolve","loggedIn","getToken","isTokenExpired","decoded","exp","Date","now","err","idToken","localStorage","setItem","getItem","logout","removeItem","url","options","headers","Accept","Authorization","_checkStatus","response","json","status","error","Error","statusText"],"sources":["/Users/danielaguilera/Projects/bereal-songs-official/client/src/services/auth.js"],"sourcesContent":["import decode from 'jwt-decode';\n\nexport default class AuthService {\n  // Initializing important variables\n  constructor(domain) {\n    this.domain = domain || 'http://localhost:4000'; // API server domain\n    this.fetch = this.fetch.bind(this); // React binding stuff\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  login(email, password) {\n    // Get a token from api server using the fetch api\n    return this.fetch(`${this.domain}/api/authenticate`, {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password,\n      }),\n    }).then((res) => {\n      this.setToken(res.token); // Setting the token in localStorage\n      return Promise.resolve(res);\n    });\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // Getting token from localstorage\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        // Checking if token is expired. N\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  setToken(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n  }\n\n  getProfile() {\n    // Using jwt-decode npm package to decode the token\n    return decode(this.getToken());\n  }\n\n  fetch(url, options) {\n    // performs api calls sending the required authentication headers\n    const headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    };\n\n    // Setting Authorization header\n    // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n    if (this.loggedIn()) {\n      headers.Authorization = `Bearer ${this.getToken()}`;\n    }\n\n    return fetch(url, {\n      headers,\n      ...options,\n    })\n      .then(this._checkStatus)\n      .then((response) => response.json());\n  }\n\n  _checkStatus(response) {\n    // raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}